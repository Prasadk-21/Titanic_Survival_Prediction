# -*- coding: utf-8 -*-
"""Titanic_Survival_Pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Wk7zW_PcIKRQ5tGqDJ8oqlQ6raPX1JT

**Machine Learning Project**

**Titanic Survival Prediction Using Machine Learning**

WorkFlow-->


---



1.Collecting Data

2.Preprocessing The Data

3.Analysing The Data

4.Splitting the data into Test and Train

5.Applying a Machine Learning Model(Logistic Regression)

6.Evaluation/Cross-Checking our Model using Test Data

Step1 :
Import The Libraries/Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Step2 :
Data Collection and Processing
"""

#Load the data from a csv file to a Pandas Dataframe

titanic_data=pd.read_csv('/content/train.csv')

#Print first 5 rows of Dataframe

titanic_data.head()

#Check The number of Rows and Columns

titanic_data.shape

# Getting some more info about the data(titanic_data)

titanic_data.info()

#To Check number of Missing values in each Column

titanic_data.isnull().sum()

"""Step3 :
Handling Missing Values
"""

#Drop Cabin Column as it lacks much data
#axis=0 represent row and 1 represent column

titanic_data=titanic_data.drop(columns='Cabin', axis=1)

#Replace Missing values in 'Age' Column with Mean Value
#Inplace=True will permantly replace the dataframe with mean values

titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

#Finding The mode Value of 'Embarked' Column

print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

#Replace Missing values in 'Embarked' Column with Mode

titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

#Check Missing Values Now

titanic_data.isnull().sum()

"""Step4 :
Data Analysis
"""

#Get Some Statistical Measures about the data

titanic_data.describe()

#Finding the number of People Survived and Not Survived

titanic_data['Survived'].value_counts()

"""Step5 :
Data Visualization
"""

sns.set()

#Making a Count-Plot for Survived Column

sns.countplot(titanic_data , x="Survived")

titanic_data['Sex'].value_counts()

#Making a Count-Plot for "Gender" Column

sns.countplot(titanic_data , x="Sex")

# Number Of Survivors based on Gender

sns.countplot(titanic_data, x="Sex", hue="Survived")

#Making a Count-Plot for P-Class
sns.countplot(titanic_data,x='Pclass')

#Classify dataset based on Pclass
sns.countplot(titanic_data, x="Pclass", hue="Survived")

"""Step 6:
Encoding the Categorical Columns
"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#Replace the above categories with numbers as 0,1,2

titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0, 'C':1, 'Q':2}}, inplace=True)

titanic_data.head()

"""Step 7:
Separating Features and Target
"""

#x is data for prediction of y and y is target that we need to predict

x= titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
y= titanic_data['Survived']

print(x)

print(y)

"""Step 8:
Splitting Data as Training and Test Data
"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=2)

print(x.shape, X_train.shape, X_test.shape)

"""Step 9:
Training Model using Logistic Regression
"""

#we create a model instance to train our features

model=LogisticRegression()

#training The Logistic Regression model with the training data

model.fit(X_train, Y_train)

"""Step 10:
Model Evaluation using Accuracy_Score
"""

#accuracy_score on training data

X_train_prediction=model.predict(X_train)

print(X_train_prediction)

#Here the target is being compared with the predicted trained outcome
#It prints the probability of correct predictions
# of x_pred with y_train
training_data_accuracy=accuracy_score(Y_train, X_train_prediction)

print("Accuracy of Training Data:", training_data_accuracy)

#accuracy_score on test data

X_test_prediction=model.predict(X_test)

print(X_test_prediction)

#Now predict on test data
test_data_accuracy=accuracy_score(Y_test, X_test_prediction)

print("Accuracy of Test Data:", training_data_accuracy)

"""The Above Model can predict correctly in almost 80 cases out of 100 cases. That's pretty good.."""

